syntax = "proto3";

package pb;


import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";


option go_package = "github.com/demola234/realio_go_microservice/pb";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Realio-Authentication";
    version: "1.0";
    contact: {
      name: "Realio-Authentication";
      url: "https://github.com/demola234/realio_go_microservice";
      email: "ademolakolawole45@gmail.com";
    };
  };
  
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization Bearer"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  };
  tags: [
    {
      name: "Authentication"
      description: "APIs related to user authentication"
    },
    {
      name: "User"
      description: "APIs related to user management"
    },
    {
      name: "OAuth"
      description: "APIs related to OAuth authentication"
    }
  ];
};



// AuthService defines authentication-related RPCs.
service AuthService {
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to login and generate an access token";
      summary: "Login a user";
      tags: "Authentication";
      security: {} // Disable security key
    };
  };
  
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/api/v1/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to register a new user";
      summary: "Register a new user";
      tags: "Authentication";
      security: {} // Disable security key
    };
  };
  
  rpc VerifyUser (VerifyUserRequest) returns (VerifyUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/verify"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to verify a user with OTP";
      summary: "Verify user with OTP";
      tags: "Authentication";
      security: {} // Disable security key
    };
  };

rpc UploadImage (UploadImageRequest) returns (UploadImageResponse) { 
  option (google.api.http) = {
    post: "/api/v1/upload-image"
    body: "*"
  };

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to upload an image";
    summary: "Upload Image";
    tags: "User";
    consumes: ["multipart/form-data"];
  };
}

  
  rpc ResendOtp (ResendOtpRequest) returns (ResendOtpResponse) {
    option (google.api.http) = {
      post: "/api/v1/resend-otp"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to resend OTP to the user's email";
      summary: "Resend OTP";
      tags: "Authentication";
      security: {} // Disable security key
    };
  };
  
  rpc GetUser (GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to get user details by user ID";
      summary: "Get user details";
      tags: "User";
    };
  };
  
  rpc LogOut (LogOutRequest) returns (LogOutResponse) {
    option (google.api.http) = {
      post: "/api/v1/logout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to logout and invalidate the user session";
      summary: "Logout user";
      tags: "Authentication";
    };
  };
  
  rpc OAuthLogin (OAuthLoginRequest) returns (OAuthLoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/oauth/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to login using OAuth providers";
      summary: "OAuth login";
      tags: "OAuth";
      security: {} // Disable security key
    };
  };
  
  rpc OAuthRegister (OAuthRegisterRequest) returns (OAuthRegisterResponse) {
    option (google.api.http) = {
      post: "/api/v1/oauth/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "User this API to register using OAuth providers";
      summary: "OAuth register";
      tags: "OAuth";
      security: {} // Disable security key
    };
  };

rpc ForgotPassword (ForgotPasswordRequest) returns (ForgotPasswordResponse) {
  option (google.api.http) = {
    post: "/api/v1/forgot-password"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to request a password reset OTP";
    summary: "Request password reset OTP";
    tags: "Authentication";
    security: {} // Disable security key
  };
};

rpc VerifyResetPassword (VerifyResetPasswordRequest) returns (VerifyResetPasswordResponse) {
  option (google.api.http) = {
    post: "/api/v1/verify-reset"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to verify the OTP for password reset";
    summary: "Verify password reset OTP";
    tags: "Authentication";
    security: {} // Disable security key
  };
};

rpc ResetPassword (ResetPasswordRequest) returns (ResetPasswordResponse) {
  option (google.api.http) = {
    post: "/api/v1/reset-password"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to set a new password after OTP verification";
    summary: "Reset password";
    tags: "Authentication";
    security: {} // Disable security key
  };
};

// New account management endpoints
  rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/api/v1/change-password"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to change the user's password";
      summary: "Change password";
      tags: "User";
    };
  };
  
  rpc GetProfile (GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http) = {
      get: "/api/v1/profile"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to get the user's profile information";
      summary: "Get user profile";
      tags: "User";
    };
  };
  
  rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      put: "/api/v1/profile"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update the user's profile information";
      summary: "Update user profile";
      tags: "User";
    };
  };
  
  rpc GetSessions (GetSessionsRequest) returns (GetSessionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/sessions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to list all active sessions for the user";
      summary: "Get active sessions";
      tags: "Authentication";
    };
  };
  
  rpc RevokeSession (RevokeSessionRequest) returns (RevokeSessionResponse) {
    option (google.api.http) = {
      delete: "/api/v1/sessions/{session_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to revoke a specific session";
      summary: "Revoke session";
      tags: "Authentication";
    };
  };
  
  rpc DeactivateAccount (DeactivateAccountRequest) returns (DeactivateAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/account/deactivate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to temporarily deactivate a user account";
      summary: "Deactivate account";
      tags: "User";
    };
  };
  
rpc DeleteAccount (DeleteAccountRequest) returns (DeleteAccountResponse) {
  option (google.api.http) = {
    post: "/api/v1/account/delete"  // Changed from delete to post
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to permanently delete a user account";
    summary: "Delete account";
    tags: "User";
  };
};
  
  rpc GetLoginHistory (GetLoginHistoryRequest) returns (GetLoginHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/account/login-history"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to get the login history for the user's account";
      summary: "Get login history";
      tags: "User";
    };
  };
}

// User entity with core user details.
message User {
  string user_id = 1;
  string email = 2;
  string full_name = 3;
  string password = 4;
  string role = 5;
  string phone = 6;
  bool is_verified = 7;
  google.protobuf.Timestamp updated_at = 8;
  google.protobuf.Timestamp created_at = 9;
}

// Session entity containing token information.
message Session {
  string token = 1;
  google.protobuf.Timestamp expires_at = 2;
}

// Login RPC messages.
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  User user = 1;
  Session session = 2;
}

// Register RPC messages.
message RegisterRequest {
  string email = 1;
  string password = 2;
  string full_name = 3;
  string role = 4;
  string phone = 5;
}

message RegisterResponse {
  User user = 1;
}

// VerifyUser RPC messages.
message VerifyUserRequest {
  string email = 1;
  string otp = 2;
}

message VerifyUserResponse {
  bool valid = 1;
  Session session = 2;
}

// ResendOtp RPC messages.
message ResendOtpRequest {
  string email = 1;
}

message ResendOtpResponse {
  string message = 1;
}

// GetUser RPC messages.
message GetUserRequest {
  string user_id = 1;
}

message GetUserResponse {
  User user = 1;
}

// LogOut RPC messages.
message LogOutRequest {
  string user_id = 1;
}

message LogOutResponse {
  string message = 1;
}

// OAuth Login messages
message OAuthLoginRequest {
  string provider = 1;  
  string token = 2;
}

message OAuthLoginResponse {
  User user = 1;
  Session session = 2;
}

// OAuth Register messages (same as Login)
message OAuthRegisterRequest {
  string provider = 1;
  string token = 2;
}

message OAuthRegisterResponse {
  User user = 1;
  Session session = 2;
}

message UploadImageRequest {
  string user_id = 1;
  bytes content = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  description: "The binary content of the image file"
  format: "binary"
}];
}

message UploadImageResponse {
  string message = 1;
  string image_url = 2;
  string user_id = 3;
}

message ForgotPasswordRequest {
  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Email address associated with the account"
    example: "\"user@example.com\""
  }];
}

message ForgotPasswordResponse {
  string message = 1;
}

message VerifyResetPasswordRequest {
  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Email address associated with the account"
    example: "\"user@example.com\""
  }];
  string otp = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "6-digit OTP received via email or SMS"
    example: "\"123456\""
  }];
}

message VerifyResetPasswordResponse {
  string message = 1;
  bool valid = 2;
}

message ResetPasswordRequest {
  string email = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Email address associated with the account"
    example: "\"user@example.com\""
  }];
  string new_password = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "New password that meets password requirements"
    example: "\"NewSecureP@ssw0rd\""
  }];
}

message ResetPasswordResponse {
  string message = 1;
}


// ChangePassword RPC messages.
message ChangePasswordRequest {
  string current_password = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's current password"
  }];
  string new_password = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The new password to set"
  }];
  string user_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message ChangePasswordResponse {
  string message = 1;
}

// GetProfile RPC messages.
message GetProfileRequest {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message ProfileDetails {
  string bio = 1;
  string location = 2;
  string website = 3;
  google.protobuf.Timestamp joined_at = 4;
  map<string, string> preferences = 5;
  string user_id = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message GetProfileResponse {
  User user = 1;
  ProfileDetails profile_details = 2;
}

// UpdateProfile RPC messages.
message UpdateProfileRequest {
  string full_name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's full name"
  }];
  string bio = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's bio"
  }];
  string phone = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's phone number"
  }];
  string location = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's location"
  }];
  string website = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's website"
  }];
   string user_id = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message UpdateProfileResponse {
  User user = 1;
  ProfileDetails profile_details = 2;
}

// GetSessions RPC messages.
message GetSessionsRequest {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message SessionInfo {
  string session_id = 1;
  string device_info = 2;
  string ip_address = 3;
  string user_agent = 4;
  google.protobuf.Timestamp last_activity = 5;
  bool is_current = 6;
}

message GetSessionsResponse {
  repeated SessionInfo sessions = 1;
}

// RevokeSession RPC messages.
message RevokeSessionRequest {
  string session_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The ID of the session to revoke"
  }];
  string user_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message RevokeSessionResponse {
  string message = 1;
}

// DeactivateAccount RPC messages.
message DeactivateAccountRequest {
  string password = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's password to confirm deactivation"
  }];
    string user_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message DeactivateAccountResponse {
  string message = 1;
}

// DeleteAccount RPC messages.
message DeleteAccountRequest {
  string password = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's password to confirm deletion"
  }];
  string user_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message DeleteAccountResponse {
  string message = 1;
}


// GetLoginHistory RPC messages.
message LoginHistoryEntry {
  string ip_address = 1;
  string user_agent = 2;
  string location = 3;
}

message GetLoginHistoryRequest {
  int32 limit = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Number of login history entries to return (default: 10)"
  }];
  string user_id = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The user's ID"   
  }];
}

message GetLoginHistoryResponse {
  repeated LoginHistoryEntry history = 1;
}
