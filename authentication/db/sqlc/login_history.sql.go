// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: login_history.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLoginHistory = `-- name: CreateLoginHistory :one
INSERT INTO login_history (
    id, user_id, ip_address, user_agent
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, ip_address, user_agent, login_time
`

type CreateLoginHistoryParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	IpAddress string    `json:"ip_address"`
	UserAgent string    `json:"user_agent"`
}

func (q *Queries) CreateLoginHistory(ctx context.Context, arg CreateLoginHistoryParams) (LoginHistory, error) {
	row := q.db.QueryRowContext(ctx, createLoginHistory,
		arg.ID,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i LoginHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.LoginTime,
	)
	return i, err
}

const getLoginHistory = `-- name: GetLoginHistory :many
SELECT id, user_id, ip_address, user_agent, login_time FROM login_history
WHERE user_id = $1
ORDER BY login_time DESC
LIMIT $2
`

type GetLoginHistoryParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) GetLoginHistory(ctx context.Context, arg GetLoginHistoryParams) ([]LoginHistory, error) {
	rows, err := q.db.QueryContext(ctx, getLoginHistory, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginHistory{}
	for rows.Next() {
		var i LoginHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.LoginTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
