// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const changePassword = `-- name: ChangePassword :one
UPDATE users
SET password = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, name, username, profile_picture, bio, email, password, role, phone, provider, provider_id, created_at, updated_at
`

type ChangePasswordParams struct {
	ID       uuid.UUID      `json:"id"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, changePassword, arg.ID, arg.Password)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.ProfilePicture,
		&i.Bio,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE email = $1
    LIMIT 1
) AS exists
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    name,
    username,
    email,
    password,
    profile_picture,
    bio,
    role,
    phone,
    provider,
    provider_id,
    created_at,
    updated_at
) VALUES (
    $1, -- id
    $2, -- name
    $3, -- username
    $4, -- email
    $5, -- password
    $6, -- profile_picture
    $7, -- bio
    $8, -- role
    $9, -- phone
    $10, -- provider
    $11, -- provider_id
    now(), -- created_at
    now()  -- updated_at
) RETURNING id, name, username, profile_picture, bio, email, password, role, phone, provider, provider_id, created_at, updated_at
`

type CreateUserParams struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Username       string         `json:"username"`
	Email          string         `json:"email"`
	Password       sql.NullString `json:"password"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Bio            sql.NullString `json:"bio"`
	Role           sql.NullString `json:"role"`
	Phone          sql.NullString `json:"phone"`
	Provider       sql.NullString `json:"provider"`
	ProviderID     sql.NullString `json:"provider_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ProfilePicture,
		arg.Bio,
		arg.Role,
		arg.Phone,
		arg.Provider,
		arg.ProviderID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.ProfilePicture,
		&i.Bio,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, profile_picture, bio, email, password, role, phone, provider, provider_id, created_at, updated_at FROM users
WHERE email = $1 OR id::text = $1 OR username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.ProfilePicture,
		&i.Bio,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name = COALESCE($1, name),
    username = COALESCE($2, username),
    email = COALESCE($3, email),
    password = COALESCE($4, password),
    profile_picture = COALESCE($5, profile_picture),
    bio = COALESCE($6, bio),
    role = COALESCE($7, role),
    phone = COALESCE($8, phone),
    updated_at = now()
WHERE id = $9
RETURNING id, name, username, profile_picture, bio, email, password, role, phone, provider, provider_id, created_at, updated_at
`

type UpdateUserParams struct {
	Name           string         `json:"name"`
	Username       string         `json:"username"`
	Email          string         `json:"email"`
	Password       sql.NullString `json:"password"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Bio            sql.NullString `json:"bio"`
	Role           sql.NullString `json:"role"`
	Phone          sql.NullString `json:"phone"`
	ID             uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ProfilePicture,
		arg.Bio,
		arg.Role,
		arg.Phone,
		arg.ID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.ProfilePicture,
		&i.Bio,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Phone,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
