// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_verification.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEmailVerification = `-- name: CreateEmailVerification :one
INSERT INTO email_verification (
    id, 
    user_id, 
    otp, 
    otp_verified,
    otp_attempts,
    otp_expires_at, 
    created_at, 
    expires_at, 
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, now(), $5, now()
) RETURNING id, user_id, otp_expires_at, otp, otp_attempts, otp_verified, created_at, expires_at, updated_at
`

type CreateEmailVerificationParams struct {
	ID           uuid.UUID      `json:"id"`
	UserID       uuid.UUID      `json:"user_id"`
	Otp          sql.NullString `json:"otp"`
	OtpVerified  sql.NullBool   `json:"otp_verified"`
	OtpAttempts  sql.NullInt32  `json:"otp_attempts"`
	OtpExpiresAt sql.NullTime   `json:"otp_expires_at"`
}

func (q *Queries) CreateEmailVerification(ctx context.Context, arg CreateEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, createEmailVerification,
		arg.ID,
		arg.UserID,
		arg.Otp,
		arg.OtpVerified,
		arg.OtpAttempts,
		arg.OtpExpiresAt,
	)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpExpiresAt,
		&i.Otp,
		&i.OtpAttempts,
		&i.OtpVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredEmailVerifications = `-- name: DeleteExpiredEmailVerifications :exec
DELETE FROM email_verification
WHERE expires_at < now()
`

func (q *Queries) DeleteExpiredEmailVerifications(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredEmailVerifications)
	return err
}

const getEmailVerification = `-- name: GetEmailVerification :one
SELECT id, user_id, otp_expires_at, otp, otp_attempts, otp_verified, created_at, expires_at, updated_at FROM email_verification
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetEmailVerification(ctx context.Context, userID uuid.UUID) (EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerification, userID)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpExpiresAt,
		&i.Otp,
		&i.OtpAttempts,
		&i.OtpVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementOTPAttempts = `-- name: IncrementOTPAttempts :exec
UPDATE email_verification
SET otp_attempts = otp_attempts + 1,
    updated_at = now()
WHERE user_id = $1
`

func (q *Queries) IncrementOTPAttempts(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementOTPAttempts, userID)
	return err
}

const markEmailVerified = `-- name: MarkEmailVerified :exec
UPDATE email_verification
SET otp_verified = true,
    updated_at = now()
WHERE user_id = $1
`

func (q *Queries) MarkEmailVerified(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markEmailVerified, userID)
	return err
}
