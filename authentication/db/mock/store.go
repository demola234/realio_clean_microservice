// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demola234/authentication/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/demola234/authentication/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockStore) ChangePassword(arg0 context.Context, arg1 db.ChangePasswordParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockStoreMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockStore)(nil).ChangePassword), arg0, arg1)
}

// CheckEmailExists mocks base method.
func (m *MockStore) CheckEmailExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailExists indicates an expected call of CheckEmailExists.
func (mr *MockStoreMockRecorder) CheckEmailExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailExists", reflect.TypeOf((*MockStore)(nil).CheckEmailExists), arg0, arg1)
}

// CreateEmailVerification mocks base method.
func (m *MockStore) CreateEmailVerification(arg0 context.Context, arg1 db.CreateEmailVerificationParams) (db.EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailVerification", arg0, arg1)
	ret0, _ := ret[0].(db.EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailVerification indicates an expected call of CreateEmailVerification.
func (mr *MockStoreMockRecorder) CreateEmailVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailVerification", reflect.TypeOf((*MockStore)(nil).CreateEmailVerification), arg0, arg1)
}

// CreateLoginHistory mocks base method.
func (m *MockStore) CreateLoginHistory(arg0 context.Context, arg1 db.CreateLoginHistoryParams) (db.LoginHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginHistory", arg0, arg1)
	ret0, _ := ret[0].(db.LoginHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginHistory indicates an expected call of CreateLoginHistory.
func (mr *MockStoreMockRecorder) CreateLoginHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginHistory", reflect.TypeOf((*MockStore)(nil).CreateLoginHistory), arg0, arg1)
}

// CreateLoginHistoryEntry mocks base method.
func (m *MockStore) CreateLoginHistoryEntry(arg0 context.Context, arg1 db.CreateLoginHistoryEntryParams) (db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginHistoryEntry", arg0, arg1)
	ret0, _ := ret[0].(db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoginHistoryEntry indicates an expected call of CreateLoginHistoryEntry.
func (mr *MockStoreMockRecorder) CreateLoginHistoryEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginHistoryEntry", reflect.TypeOf((*MockStore)(nil).CreateLoginHistoryEntry), arg0, arg1)
}

// CreatePasswordReset mocks base method.
func (m *MockStore) CreatePasswordReset(arg0 context.Context, arg1 db.CreatePasswordResetParams) (db.PasswordResets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePasswordReset indicates an expected call of CreatePasswordReset.
func (mr *MockStoreMockRecorder) CreatePasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePasswordReset", reflect.TypeOf((*MockStore)(nil).CreatePasswordReset), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteExpiredEmailVerifications mocks base method.
func (m *MockStore) DeleteExpiredEmailVerifications(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredEmailVerifications", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredEmailVerifications indicates an expected call of DeleteExpiredEmailVerifications.
func (mr *MockStoreMockRecorder) DeleteExpiredEmailVerifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredEmailVerifications", reflect.TypeOf((*MockStore)(nil).DeleteExpiredEmailVerifications), arg0)
}

// DeleteExpiredPasswordResets mocks base method.
func (m *MockStore) DeleteExpiredPasswordResets(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredPasswordResets", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredPasswordResets indicates an expected call of DeleteExpiredPasswordResets.
func (mr *MockStoreMockRecorder) DeleteExpiredPasswordResets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredPasswordResets", reflect.TypeOf((*MockStore)(nil).DeleteExpiredPasswordResets), arg0)
}

// DeletePasswordResetsByUserId mocks base method.
func (m *MockStore) DeletePasswordResetsByUserId(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordResetsByUserId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordResetsByUserId indicates an expected call of DeletePasswordResetsByUserId.
func (mr *MockStoreMockRecorder) DeletePasswordResetsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordResetsByUserId", reflect.TypeOf((*MockStore)(nil).DeletePasswordResetsByUserId), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockStore) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockStoreMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockStore)(nil).DeleteSession), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetEmailVerification mocks base method.
func (m *MockStore) GetEmailVerification(arg0 context.Context, arg1 uuid.UUID) (db.EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailVerification", arg0, arg1)
	ret0, _ := ret[0].(db.EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailVerification indicates an expected call of GetEmailVerification.
func (mr *MockStoreMockRecorder) GetEmailVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailVerification", reflect.TypeOf((*MockStore)(nil).GetEmailVerification), arg0, arg1)
}

// GetLoginHistory mocks base method.
func (m *MockStore) GetLoginHistory(arg0 context.Context, arg1 db.GetLoginHistoryParams) ([]db.LoginHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginHistory", arg0, arg1)
	ret0, _ := ret[0].([]db.LoginHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginHistory indicates an expected call of GetLoginHistory.
func (mr *MockStoreMockRecorder) GetLoginHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginHistory", reflect.TypeOf((*MockStore)(nil).GetLoginHistory), arg0, arg1)
}

// GetPasswordResetByToken mocks base method.
func (m *MockStore) GetPasswordResetByToken(arg0 context.Context, arg1 string) (db.PasswordResets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetByToken", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordResetByToken indicates an expected call of GetPasswordResetByToken.
func (mr *MockStoreMockRecorder) GetPasswordResetByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetByToken", reflect.TypeOf((*MockStore)(nil).GetPasswordResetByToken), arg0, arg1)
}

// GetSessionByID mocks base method.
func (m *MockStore) GetSessionByID(arg0 context.Context, arg1 uuid.UUID) (db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", arg0, arg1)
	ret0, _ := ret[0].(db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockStoreMockRecorder) GetSessionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockStore)(nil).GetSessionByID), arg0, arg1)
}

// GetSessionByUserID mocks base method.
func (m *MockStore) GetSessionByUserID(arg0 context.Context, arg1 uuid.UUID) (db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUserID indicates an expected call of GetSessionByUserID.
func (mr *MockStoreMockRecorder) GetSessionByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUserID", reflect.TypeOf((*MockStore)(nil).GetSessionByUserID), arg0, arg1)
}

// GetSessionsByUserID mocks base method.
func (m *MockStore) GetSessionsByUserID(arg0 context.Context, arg1 uuid.UUID) ([]db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsByUserID indicates an expected call of GetSessionsByUserID.
func (mr *MockStoreMockRecorder) GetSessionsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsByUserID", reflect.TypeOf((*MockStore)(nil).GetSessionsByUserID), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// IncrementOTPAttempts mocks base method.
func (m *MockStore) IncrementOTPAttempts(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementOTPAttempts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementOTPAttempts indicates an expected call of IncrementOTPAttempts.
func (mr *MockStoreMockRecorder) IncrementOTPAttempts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementOTPAttempts", reflect.TypeOf((*MockStore)(nil).IncrementOTPAttempts), arg0, arg1)
}

// InvalidatePasswordReset mocks base method.
func (m *MockStore) InvalidatePasswordReset(arg0 context.Context, arg1 string) (db.PasswordResets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidatePasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidatePasswordReset indicates an expected call of InvalidatePasswordReset.
func (mr *MockStoreMockRecorder) InvalidatePasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidatePasswordReset", reflect.TypeOf((*MockStore)(nil).InvalidatePasswordReset), arg0, arg1)
}

// MarkEmailVerified mocks base method.
func (m *MockStore) MarkEmailVerified(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEmailVerified", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkEmailVerified indicates an expected call of MarkEmailVerified.
func (mr *MockStoreMockRecorder) MarkEmailVerified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEmailVerified", reflect.TypeOf((*MockStore)(nil).MarkEmailVerified), arg0, arg1)
}

// RevokeSession mocks base method.
func (m *MockStore) RevokeSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockStoreMockRecorder) RevokeSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockStore)(nil).RevokeSession), arg0, arg1)
}

// UpdateEmailVerification mocks base method.
func (m *MockStore) UpdateEmailVerification(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailVerification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmailVerification indicates an expected call of UpdateEmailVerification.
func (mr *MockStoreMockRecorder) UpdateEmailVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailVerification", reflect.TypeOf((*MockStore)(nil).UpdateEmailVerification), arg0, arg1)
}

// UpdateLastLogin mocks base method.
func (m *MockStore) UpdateLastLogin(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockStoreMockRecorder) UpdateLastLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockStore)(nil).UpdateLastLogin), arg0, arg1)
}

// UpdateSession mocks base method.
func (m *MockStore) UpdateSession(arg0 context.Context, arg1 db.UpdateSessionParams) (db.Sessions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Sessions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockStoreMockRecorder) UpdateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockStore)(nil).UpdateSession), arg0, arg1)
}

// UpdateSessionActivity mocks base method.
func (m *MockStore) UpdateSessionActivity(arg0 context.Context, arg1 db.UpdateSessionActivityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionActivity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionActivity indicates an expected call of UpdateSessionActivity.
func (mr *MockStoreMockRecorder) UpdateSessionActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionActivity", reflect.TypeOf((*MockStore)(nil).UpdateSessionActivity), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserProfilePicture mocks base method.
func (m *MockStore) UpdateUserProfilePicture(arg0 context.Context, arg1 db.UpdateUserProfilePictureParams) (db.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfilePicture", arg0, arg1)
	ret0, _ := ret[0].(db.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfilePicture indicates an expected call of UpdateUserProfilePicture.
func (mr *MockStoreMockRecorder) UpdateUserProfilePicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfilePicture", reflect.TypeOf((*MockStore)(nil).UpdateUserProfilePicture), arg0, arg1)
}
