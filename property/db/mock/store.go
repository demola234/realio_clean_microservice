// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demola234/property/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "github.com/demola234/property/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteProperty mocks base method.
func (m *MockStore) DeleteProperty(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockStoreMockRecorder) DeleteProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockStore)(nil).DeleteProperty), arg0, arg1)
}

// GetPropertiesByOwnerID mocks base method.
func (m *MockStore) GetPropertiesByOwnerID(arg0 context.Context, arg1 db.GetPropertiesByOwnerIDParams) ([]db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertiesByOwnerID", arg0, arg1)
	ret0, _ := ret[0].([]db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertiesByOwnerID indicates an expected call of GetPropertiesByOwnerID.
func (mr *MockStoreMockRecorder) GetPropertiesByOwnerID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertiesByOwnerID", reflect.TypeOf((*MockStore)(nil).GetPropertiesByOwnerID), arg0, arg1)
}

// GetPropertyByID mocks base method.
func (m *MockStore) GetPropertyByID(arg0 context.Context, arg1 uuid.UUID) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyByID", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyByID indicates an expected call of GetPropertyByID.
func (mr *MockStoreMockRecorder) GetPropertyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyByID", reflect.TypeOf((*MockStore)(nil).GetPropertyByID), arg0, arg1)
}

// InsertProperty mocks base method.
func (m *MockStore) InsertProperty(arg0 context.Context, arg1 db.InsertPropertyParams) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProperty", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProperty indicates an expected call of InsertProperty.
func (mr *MockStoreMockRecorder) InsertProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProperty", reflect.TypeOf((*MockStore)(nil).InsertProperty), arg0, arg1)
}

// ListProperties mocks base method.
func (m *MockStore) ListProperties(arg0 context.Context, arg1 db.ListPropertiesParams) ([]db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProperties indicates an expected call of ListProperties.
func (mr *MockStoreMockRecorder) ListProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProperties", reflect.TypeOf((*MockStore)(nil).ListProperties), arg0, arg1)
}

// UpdateProperty mocks base method.
func (m *MockStore) UpdateProperty(arg0 context.Context, arg1 db.UpdatePropertyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockStoreMockRecorder) UpdateProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockStore)(nil).UpdateProperty), arg0, arg1)
}
