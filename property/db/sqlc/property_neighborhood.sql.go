// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: property_neighborhood.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createPropertyNeighborhood = `-- name: CreatePropertyNeighborhood :one
INSERT INTO "PropertyNeighborhood" (
  id,
  property_id,
  school_district,
  school_rating,
  crime_rate,
  walk_score,
  transit_score,
  bike_score,
  nearby_locations
) VALUES (
  gen_random_uuid(),
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, property_id, school_district, school_rating, crime_rate, walk_score, transit_score, bike_score, nearby_locations, created_at, updated_at
`

type CreatePropertyNeighborhoodParams struct {
	PropertyID      uuid.UUID             `json:"property_id"`
	SchoolDistrict  sql.NullString        `json:"school_district"`
	SchoolRating    sql.NullInt32         `json:"school_rating"`
	CrimeRate       sql.NullString        `json:"crime_rate"`
	WalkScore       sql.NullInt32         `json:"walk_score"`
	TransitScore    sql.NullInt32         `json:"transit_score"`
	BikeScore       sql.NullInt32         `json:"bike_score"`
	NearbyLocations pqtype.NullRawMessage `json:"nearby_locations"`
}

func (q *Queries) CreatePropertyNeighborhood(ctx context.Context, arg CreatePropertyNeighborhoodParams) (PropertyNeighborhood, error) {
	row := q.db.QueryRowContext(ctx, createPropertyNeighborhood,
		arg.PropertyID,
		arg.SchoolDistrict,
		arg.SchoolRating,
		arg.CrimeRate,
		arg.WalkScore,
		arg.TransitScore,
		arg.BikeScore,
		arg.NearbyLocations,
	)
	var i PropertyNeighborhood
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.SchoolDistrict,
		&i.SchoolRating,
		&i.CrimeRate,
		&i.WalkScore,
		&i.TransitScore,
		&i.BikeScore,
		&i.NearbyLocations,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertyNeighborhood = `-- name: GetPropertyNeighborhood :one
SELECT id, property_id, school_district, school_rating, crime_rate, walk_score, transit_score, bike_score, nearby_locations, created_at, updated_at FROM "PropertyNeighborhood"
WHERE property_id = $1
LIMIT 1
`

func (q *Queries) GetPropertyNeighborhood(ctx context.Context, propertyID uuid.UUID) (PropertyNeighborhood, error) {
	row := q.db.QueryRowContext(ctx, getPropertyNeighborhood, propertyID)
	var i PropertyNeighborhood
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.SchoolDistrict,
		&i.SchoolRating,
		&i.CrimeRate,
		&i.WalkScore,
		&i.TransitScore,
		&i.BikeScore,
		&i.NearbyLocations,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePropertyNeighborhood = `-- name: UpdatePropertyNeighborhood :one
UPDATE "PropertyNeighborhood"
SET
  school_district = COALESCE($2, school_district),
  school_rating = COALESCE($3, school_rating),
  crime_rate = COALESCE($4, crime_rate),
  walk_score = COALESCE($5, walk_score),
  transit_score = COALESCE($6, transit_score),
  bike_score = COALESCE($7, bike_score),
  nearby_locations = COALESCE($8, nearby_locations),
  updated_at = now()
WHERE property_id = $1
RETURNING id, property_id, school_district, school_rating, crime_rate, walk_score, transit_score, bike_score, nearby_locations, created_at, updated_at
`

type UpdatePropertyNeighborhoodParams struct {
	PropertyID      uuid.UUID             `json:"property_id"`
	SchoolDistrict  sql.NullString        `json:"school_district"`
	SchoolRating    sql.NullInt32         `json:"school_rating"`
	CrimeRate       sql.NullString        `json:"crime_rate"`
	WalkScore       sql.NullInt32         `json:"walk_score"`
	TransitScore    sql.NullInt32         `json:"transit_score"`
	BikeScore       sql.NullInt32         `json:"bike_score"`
	NearbyLocations pqtype.NullRawMessage `json:"nearby_locations"`
}

func (q *Queries) UpdatePropertyNeighborhood(ctx context.Context, arg UpdatePropertyNeighborhoodParams) (PropertyNeighborhood, error) {
	row := q.db.QueryRowContext(ctx, updatePropertyNeighborhood,
		arg.PropertyID,
		arg.SchoolDistrict,
		arg.SchoolRating,
		arg.CrimeRate,
		arg.WalkScore,
		arg.TransitScore,
		arg.BikeScore,
		arg.NearbyLocations,
	)
	var i PropertyNeighborhood
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.SchoolDistrict,
		&i.SchoolRating,
		&i.CrimeRate,
		&i.WalkScore,
		&i.TransitScore,
		&i.BikeScore,
		&i.NearbyLocations,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
