// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: property_view.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getPropertyViewStats = `-- name: GetPropertyViewStats :one
SELECT
  COUNT(*) as total_views,
  COUNT(DISTINCT user_id) as unique_views
FROM "PropertyView"
WHERE property_id = $1
`

type GetPropertyViewStatsRow struct {
	TotalViews  int64 `json:"total_views"`
	UniqueViews int64 `json:"unique_views"`
}

func (q *Queries) GetPropertyViewStats(ctx context.Context, propertyID uuid.UUID) (GetPropertyViewStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getPropertyViewStats, propertyID)
	var i GetPropertyViewStatsRow
	err := row.Scan(&i.TotalViews, &i.UniqueViews)
	return i, err
}

const getRecentlyViewedProperties = `-- name: GetRecentlyViewedProperties :many
SELECT DISTINCT ON (pv.property_id)
  p.id, p.title, p.description, p.price, p.category, p.type, p.address, p.city, p.state, p.country, p.zip_code, p.owner_id, p.status, p.created_at, p.updated_at,
  pv.viewed_at
FROM "PropertyView" pv
JOIN "Property" p ON pv.property_id = p.id
WHERE pv.user_id = $1
ORDER BY pv.property_id, pv.viewed_at DESC
LIMIT $2
`

type GetRecentlyViewedPropertiesParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

type GetRecentlyViewedPropertiesRow struct {
	ID          uuid.UUID        `json:"id"`
	Title       string           `json:"title"`
	Description sql.NullString   `json:"description"`
	Price       string           `json:"price"`
	Category    PropertyCategory `json:"category"`
	Type        PropertyType     `json:"type"`
	Address     string           `json:"address"`
	City        string           `json:"city"`
	State       string           `json:"state"`
	Country     string           `json:"country"`
	ZipCode     sql.NullString   `json:"zip_code"`
	OwnerID     uuid.NullUUID    `json:"owner_id"`
	Status      PropertyStatus   `json:"status"`
	CreatedAt   sql.NullTime     `json:"created_at"`
	UpdatedAt   sql.NullTime     `json:"updated_at"`
	ViewedAt    sql.NullTime     `json:"viewed_at"`
}

func (q *Queries) GetRecentlyViewedProperties(ctx context.Context, arg GetRecentlyViewedPropertiesParams) ([]GetRecentlyViewedPropertiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentlyViewedProperties, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentlyViewedPropertiesRow{}
	for rows.Next() {
		var i GetRecentlyViewedPropertiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.Type,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.ZipCode,
			&i.OwnerID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordPropertyView = `-- name: RecordPropertyView :one
INSERT INTO "PropertyView" (
  id,
  property_id,
  user_id
) VALUES (
  gen_random_uuid(),
  $1, $2
)
RETURNING id, property_id, user_id, viewed_at
`

type RecordPropertyViewParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	UserID     uuid.UUID `json:"user_id"`
}

func (q *Queries) RecordPropertyView(ctx context.Context, arg RecordPropertyViewParams) (PropertyView, error) {
	row := q.db.QueryRowContext(ctx, recordPropertyView, arg.PropertyID, arg.UserID)
	var i PropertyView
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.UserID,
		&i.ViewedAt,
	)
	return i, err
}
