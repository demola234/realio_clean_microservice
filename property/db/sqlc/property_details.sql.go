// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: property_details.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createPropertyDetail = `-- name: CreatePropertyDetail :one
INSERT INTO "PropertyDetail" (
  id,
  property_id,
  bedrooms,
  bathrooms,
  toilets,
  square_footage,
  lot_size,
  year_built,
  stories,
  garage_count,
  has_basement,
  has_attic,
  heating_system,
  cooling_system,
  water_source,
  sewer_type,
  roof_type,
  exterior_material,
  foundation_type,
  pool_type,
  geo_location
) VALUES (
  gen_random_uuid(),
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, 
  $11, $12, $13, $14, $15, $16, $17, $18, $19, $20
)
RETURNING id, property_id, bedrooms, bathrooms, toilets, square_footage, lot_size, year_built, stories, garage_count, has_basement, has_attic, heating_system, cooling_system, water_source, sewer_type, roof_type, exterior_material, foundation_type, pool_type, geo_location, created_at, updated_at
`

type CreatePropertyDetailParams struct {
	PropertyID       uuid.UUID             `json:"property_id"`
	Bedrooms         sql.NullInt32         `json:"bedrooms"`
	Bathrooms        sql.NullInt32         `json:"bathrooms"`
	Toilets          sql.NullInt32         `json:"toilets"`
	SquareFootage    sql.NullString        `json:"square_footage"`
	LotSize          sql.NullString        `json:"lot_size"`
	YearBuilt        sql.NullInt32         `json:"year_built"`
	Stories          sql.NullInt32         `json:"stories"`
	GarageCount      sql.NullInt32         `json:"garage_count"`
	HasBasement      sql.NullBool          `json:"has_basement"`
	HasAttic         sql.NullBool          `json:"has_attic"`
	HeatingSystem    sql.NullString        `json:"heating_system"`
	CoolingSystem    sql.NullString        `json:"cooling_system"`
	WaterSource      sql.NullString        `json:"water_source"`
	SewerType        sql.NullString        `json:"sewer_type"`
	RoofType         sql.NullString        `json:"roof_type"`
	ExteriorMaterial sql.NullString        `json:"exterior_material"`
	FoundationType   sql.NullString        `json:"foundation_type"`
	PoolType         sql.NullString        `json:"pool_type"`
	GeoLocation      pqtype.NullRawMessage `json:"geo_location"`
}

func (q *Queries) CreatePropertyDetail(ctx context.Context, arg CreatePropertyDetailParams) (PropertyDetail, error) {
	row := q.db.QueryRowContext(ctx, createPropertyDetail,
		arg.PropertyID,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.Toilets,
		arg.SquareFootage,
		arg.LotSize,
		arg.YearBuilt,
		arg.Stories,
		arg.GarageCount,
		arg.HasBasement,
		arg.HasAttic,
		arg.HeatingSystem,
		arg.CoolingSystem,
		arg.WaterSource,
		arg.SewerType,
		arg.RoofType,
		arg.ExteriorMaterial,
		arg.FoundationType,
		arg.PoolType,
		arg.GeoLocation,
	)
	var i PropertyDetail
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.Toilets,
		&i.SquareFootage,
		&i.LotSize,
		&i.YearBuilt,
		&i.Stories,
		&i.GarageCount,
		&i.HasBasement,
		&i.HasAttic,
		&i.HeatingSystem,
		&i.CoolingSystem,
		&i.WaterSource,
		&i.SewerType,
		&i.RoofType,
		&i.ExteriorMaterial,
		&i.FoundationType,
		&i.PoolType,
		&i.GeoLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertyDetailByPropertyID = `-- name: GetPropertyDetailByPropertyID :one
SELECT id, property_id, bedrooms, bathrooms, toilets, square_footage, lot_size, year_built, stories, garage_count, has_basement, has_attic, heating_system, cooling_system, water_source, sewer_type, roof_type, exterior_material, foundation_type, pool_type, geo_location, created_at, updated_at FROM "PropertyDetail"
WHERE property_id = $1
LIMIT 1
`

func (q *Queries) GetPropertyDetailByPropertyID(ctx context.Context, propertyID uuid.UUID) (PropertyDetail, error) {
	row := q.db.QueryRowContext(ctx, getPropertyDetailByPropertyID, propertyID)
	var i PropertyDetail
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.Toilets,
		&i.SquareFootage,
		&i.LotSize,
		&i.YearBuilt,
		&i.Stories,
		&i.GarageCount,
		&i.HasBasement,
		&i.HasAttic,
		&i.HeatingSystem,
		&i.CoolingSystem,
		&i.WaterSource,
		&i.SewerType,
		&i.RoofType,
		&i.ExteriorMaterial,
		&i.FoundationType,
		&i.PoolType,
		&i.GeoLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePropertyDetail = `-- name: UpdatePropertyDetail :one
UPDATE "PropertyDetail"
SET
  bedrooms = COALESCE($2, bedrooms),
  bathrooms = COALESCE($3, bathrooms),
  toilets = COALESCE($4, toilets),
  square_footage = COALESCE($5, square_footage),
  lot_size = COALESCE($6, lot_size),
  year_built = COALESCE($7, year_built),
  stories = COALESCE($8, stories),
  garage_count = COALESCE($9, garage_count),
  has_basement = COALESCE($10, has_basement),
  has_attic = COALESCE($11, has_attic),
  heating_system = COALESCE($12, heating_system),
  cooling_system = COALESCE($13, cooling_system),
  water_source = COALESCE($14, water_source),
  sewer_type = COALESCE($15, sewer_type),
  roof_type = COALESCE($16, roof_type),
  exterior_material = COALESCE($17, exterior_material),
  foundation_type = COALESCE($18, foundation_type),
  pool_type = COALESCE($19, pool_type),
  geo_location = COALESCE($20, geo_location),
  updated_at = now()
WHERE property_id = $1
RETURNING id, property_id, bedrooms, bathrooms, toilets, square_footage, lot_size, year_built, stories, garage_count, has_basement, has_attic, heating_system, cooling_system, water_source, sewer_type, roof_type, exterior_material, foundation_type, pool_type, geo_location, created_at, updated_at
`

type UpdatePropertyDetailParams struct {
	PropertyID       uuid.UUID             `json:"property_id"`
	Bedrooms         sql.NullInt32         `json:"bedrooms"`
	Bathrooms        sql.NullInt32         `json:"bathrooms"`
	Toilets          sql.NullInt32         `json:"toilets"`
	SquareFootage    sql.NullString        `json:"square_footage"`
	LotSize          sql.NullString        `json:"lot_size"`
	YearBuilt        sql.NullInt32         `json:"year_built"`
	Stories          sql.NullInt32         `json:"stories"`
	GarageCount      sql.NullInt32         `json:"garage_count"`
	HasBasement      sql.NullBool          `json:"has_basement"`
	HasAttic         sql.NullBool          `json:"has_attic"`
	HeatingSystem    sql.NullString        `json:"heating_system"`
	CoolingSystem    sql.NullString        `json:"cooling_system"`
	WaterSource      sql.NullString        `json:"water_source"`
	SewerType        sql.NullString        `json:"sewer_type"`
	RoofType         sql.NullString        `json:"roof_type"`
	ExteriorMaterial sql.NullString        `json:"exterior_material"`
	FoundationType   sql.NullString        `json:"foundation_type"`
	PoolType         sql.NullString        `json:"pool_type"`
	GeoLocation      pqtype.NullRawMessage `json:"geo_location"`
}

func (q *Queries) UpdatePropertyDetail(ctx context.Context, arg UpdatePropertyDetailParams) (PropertyDetail, error) {
	row := q.db.QueryRowContext(ctx, updatePropertyDetail,
		arg.PropertyID,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.Toilets,
		arg.SquareFootage,
		arg.LotSize,
		arg.YearBuilt,
		arg.Stories,
		arg.GarageCount,
		arg.HasBasement,
		arg.HasAttic,
		arg.HeatingSystem,
		arg.CoolingSystem,
		arg.WaterSource,
		arg.SewerType,
		arg.RoofType,
		arg.ExteriorMaterial,
		arg.FoundationType,
		arg.PoolType,
		arg.GeoLocation,
	)
	var i PropertyDetail
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.Toilets,
		&i.SquareFootage,
		&i.LotSize,
		&i.YearBuilt,
		&i.Stories,
		&i.GarageCount,
		&i.HasBasement,
		&i.HasAttic,
		&i.HeatingSystem,
		&i.CoolingSystem,
		&i.WaterSource,
		&i.SewerType,
		&i.RoofType,
		&i.ExteriorMaterial,
		&i.FoundationType,
		&i.PoolType,
		&i.GeoLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
