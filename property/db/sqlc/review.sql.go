// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: review.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReview = `-- name: CreateReview :one
INSERT INTO "Review" (
  id,
  booking_id,
  property_id,
  reviewer_id,
  reviewed_id,
  overall_rating,
  location_rating,
  value_rating,
  accuracy_rating,
  communication_rating,
  cleanliness_rating,
  check_in_rating,
  comment,
  type
) VALUES (
  gen_random_uuid(),
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
RETURNING id, booking_id, property_id, reviewer_id, reviewed_id, overall_rating, location_rating, value_rating, accuracy_rating, communication_rating, cleanliness_rating, check_in_rating, comment, type, created_at, updated_at
`

type CreateReviewParams struct {
	BookingID           uuid.NullUUID  `json:"booking_id"`
	PropertyID          uuid.UUID      `json:"property_id"`
	ReviewerID          uuid.UUID      `json:"reviewer_id"`
	ReviewedID          uuid.NullUUID  `json:"reviewed_id"`
	OverallRating       string         `json:"overall_rating"`
	LocationRating      sql.NullString `json:"location_rating"`
	ValueRating         sql.NullString `json:"value_rating"`
	AccuracyRating      sql.NullString `json:"accuracy_rating"`
	CommunicationRating sql.NullString `json:"communication_rating"`
	CleanlinessRating   sql.NullString `json:"cleanliness_rating"`
	CheckInRating       sql.NullString `json:"check_in_rating"`
	Comment             sql.NullString `json:"comment"`
	Type                ReviewType     `json:"type"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.BookingID,
		arg.PropertyID,
		arg.ReviewerID,
		arg.ReviewedID,
		arg.OverallRating,
		arg.LocationRating,
		arg.ValueRating,
		arg.AccuracyRating,
		arg.CommunicationRating,
		arg.CleanlinessRating,
		arg.CheckInRating,
		arg.Comment,
		arg.Type,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.PropertyID,
		&i.ReviewerID,
		&i.ReviewedID,
		&i.OverallRating,
		&i.LocationRating,
		&i.ValueRating,
		&i.AccuracyRating,
		&i.CommunicationRating,
		&i.CleanlinessRating,
		&i.CheckInRating,
		&i.Comment,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM "Review"
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getPropertyReviewStats = `-- name: GetPropertyReviewStats :one
SELECT
  COUNT(*) as total_reviews,
  AVG(overall_rating) as avg_overall,
  AVG(location_rating) as avg_location,
  AVG(value_rating) as avg_value,
  AVG(accuracy_rating) as avg_accuracy,
  AVG(communication_rating) as avg_communication,
  AVG(cleanliness_rating) as avg_cleanliness,
  AVG(check_in_rating) as avg_check_in
FROM "Review"
WHERE property_id = $1
`

type GetPropertyReviewStatsRow struct {
	TotalReviews     int64   `json:"total_reviews"`
	AvgOverall       float64 `json:"avg_overall"`
	AvgLocation      float64 `json:"avg_location"`
	AvgValue         float64 `json:"avg_value"`
	AvgAccuracy      float64 `json:"avg_accuracy"`
	AvgCommunication float64 `json:"avg_communication"`
	AvgCleanliness   float64 `json:"avg_cleanliness"`
	AvgCheckIn       float64 `json:"avg_check_in"`
}

func (q *Queries) GetPropertyReviewStats(ctx context.Context, propertyID uuid.UUID) (GetPropertyReviewStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getPropertyReviewStats, propertyID)
	var i GetPropertyReviewStatsRow
	err := row.Scan(
		&i.TotalReviews,
		&i.AvgOverall,
		&i.AvgLocation,
		&i.AvgValue,
		&i.AvgAccuracy,
		&i.AvgCommunication,
		&i.AvgCleanliness,
		&i.AvgCheckIn,
	)
	return i, err
}

const getPropertyReviews = `-- name: GetPropertyReviews :many
SELECT id, booking_id, property_id, reviewer_id, reviewed_id, overall_rating, location_rating, value_rating, accuracy_rating, communication_rating, cleanliness_rating, check_in_rating, comment, type, created_at, updated_at FROM "Review"
WHERE property_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetPropertyReviewsParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) GetPropertyReviews(ctx context.Context, arg GetPropertyReviewsParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyReviews, arg.PropertyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Review{}
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.BookingID,
			&i.PropertyID,
			&i.ReviewerID,
			&i.ReviewedID,
			&i.OverallRating,
			&i.LocationRating,
			&i.ValueRating,
			&i.AccuracyRating,
			&i.CommunicationRating,
			&i.CleanlinessRating,
			&i.CheckInRating,
			&i.Comment,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
