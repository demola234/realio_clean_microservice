// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: property_availability.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const bulkSetPropertyAvailabilityStatus = `-- name: BulkSetPropertyAvailabilityStatus :exec
WITH dates AS (
  SELECT generate_series($2::date, $3::date, '1 day'::interval)::date as date
)
INSERT INTO "PropertyAvailability" (
  id,
  property_id,
  date,
  is_available
)
SELECT
  gen_random_uuid(),
  $1,
  dates.date,
  $4
FROM dates
ON CONFLICT (property_id, date)
DO UPDATE
SET
  is_available = $4,
  updated_at = now()
`

type BulkSetPropertyAvailabilityStatusParams struct {
	PropertyID  uuid.UUID    `json:"property_id"`
	Column2     time.Time    `json:"column_2"`
	Column3     time.Time    `json:"column_3"`
	IsAvailable sql.NullBool `json:"is_available"`
}

func (q *Queries) BulkSetPropertyAvailabilityStatus(ctx context.Context, arg BulkSetPropertyAvailabilityStatusParams) error {
	_, err := q.db.ExecContext(ctx, bulkSetPropertyAvailabilityStatus,
		arg.PropertyID,
		arg.Column2,
		arg.Column3,
		arg.IsAvailable,
	)
	return err
}

const getPropertyAvailability = `-- name: GetPropertyAvailability :many
SELECT id, property_id, date, is_available, price_override, min_nights, max_nights, created_at, updated_at FROM "PropertyAvailability"
WHERE property_id = $1
  AND date BETWEEN $2 AND $3
ORDER BY date
`

type GetPropertyAvailabilityParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Date       time.Time `json:"date"`
	Date_2     time.Time `json:"date_2"`
}

func (q *Queries) GetPropertyAvailability(ctx context.Context, arg GetPropertyAvailabilityParams) ([]PropertyAvailability, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyAvailability, arg.PropertyID, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PropertyAvailability{}
	for rows.Next() {
		var i PropertyAvailability
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.Date,
			&i.IsAvailable,
			&i.PriceOverride,
			&i.MinNights,
			&i.MaxNights,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPropertyAvailability = `-- name: SetPropertyAvailability :one
INSERT INTO "PropertyAvailability" (
  id,
  property_id,
  date,
  is_available,
  price_override,
  min_nights,
  max_nights
) VALUES (
  gen_random_uuid(),
  $1, $2, $3, $4, $5, $6
)
ON CONFLICT (property_id, date)
DO UPDATE
SET
  is_available = $3,
  price_override = $4,
  min_nights = $5,
  max_nights = $6,
  updated_at = now()
RETURNING id, property_id, date, is_available, price_override, min_nights, max_nights, created_at, updated_at
`

type SetPropertyAvailabilityParams struct {
	PropertyID    uuid.UUID      `json:"property_id"`
	Date          time.Time      `json:"date"`
	IsAvailable   sql.NullBool   `json:"is_available"`
	PriceOverride sql.NullString `json:"price_override"`
	MinNights     sql.NullInt32  `json:"min_nights"`
	MaxNights     sql.NullInt32  `json:"max_nights"`
}

func (q *Queries) SetPropertyAvailability(ctx context.Context, arg SetPropertyAvailabilityParams) (PropertyAvailability, error) {
	row := q.db.QueryRowContext(ctx, setPropertyAvailability,
		arg.PropertyID,
		arg.Date,
		arg.IsAvailable,
		arg.PriceOverride,
		arg.MinNights,
		arg.MaxNights,
	)
	var i PropertyAvailability
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Date,
		&i.IsAvailable,
		&i.PriceOverride,
		&i.MinNights,
		&i.MaxNights,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
