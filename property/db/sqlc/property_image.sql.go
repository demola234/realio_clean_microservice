// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: property_image.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addPropertyImage = `-- name: AddPropertyImage :one
INSERT INTO "PropertyImage" (
  id,
  property_id,
  url,
  caption,
  is_primary,
  display_order,
  room_type
) VALUES (
  gen_random_uuid(),
  $1, $2, $3, $4, $5, $6
)
RETURNING id, property_id, url, caption, is_primary, display_order, room_type, created_at, updated_at
`

type AddPropertyImageParams struct {
	PropertyID   uuid.UUID      `json:"property_id"`
	Url          string         `json:"url"`
	Caption      sql.NullString `json:"caption"`
	IsPrimary    sql.NullBool   `json:"is_primary"`
	DisplayOrder sql.NullInt32  `json:"display_order"`
	RoomType     sql.NullString `json:"room_type"`
}

func (q *Queries) AddPropertyImage(ctx context.Context, arg AddPropertyImageParams) (PropertyImage, error) {
	row := q.db.QueryRowContext(ctx, addPropertyImage,
		arg.PropertyID,
		arg.Url,
		arg.Caption,
		arg.IsPrimary,
		arg.DisplayOrder,
		arg.RoomType,
	)
	var i PropertyImage
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Url,
		&i.Caption,
		&i.IsPrimary,
		&i.DisplayOrder,
		&i.RoomType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePropertyImage = `-- name: DeletePropertyImage :exec
DELETE FROM "PropertyImage"
WHERE id = $1
`

func (q *Queries) DeletePropertyImage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePropertyImage, id)
	return err
}

const listPropertyImages = `-- name: ListPropertyImages :many
SELECT id, property_id, url, caption, is_primary, display_order, room_type, created_at, updated_at FROM "PropertyImage"
WHERE property_id = $1
ORDER BY is_primary DESC, display_order ASC
`

func (q *Queries) ListPropertyImages(ctx context.Context, propertyID uuid.UUID) ([]PropertyImage, error) {
	rows, err := q.db.QueryContext(ctx, listPropertyImages, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PropertyImage{}
	for rows.Next() {
		var i PropertyImage
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.Url,
			&i.Caption,
			&i.IsPrimary,
			&i.DisplayOrder,
			&i.RoomType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPrimaryPropertyImage = `-- name: SetPrimaryPropertyImage :exec
WITH update_primary AS (
  UPDATE "PropertyImage" pi1
  SET is_primary = false
  WHERE pi1.property_id = $1 AND pi1.id != $2
)
UPDATE "PropertyImage" pi2
SET is_primary = true
WHERE pi2.id = $2
`

type SetPrimaryPropertyImageParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) SetPrimaryPropertyImage(ctx context.Context, arg SetPrimaryPropertyImageParams) error {
	_, err := q.db.ExecContext(ctx, setPrimaryPropertyImage, arg.PropertyID, arg.ID)
	return err
}

const updatePropertyImage = `-- name: UpdatePropertyImage :one
UPDATE "PropertyImage"
SET
  url = COALESCE($2, url),
  caption = COALESCE($3, caption),
  is_primary = COALESCE($4, is_primary),
  display_order = COALESCE($5, display_order),
  room_type = COALESCE($6, room_type),
  updated_at = now()
WHERE id = $1
RETURNING id, property_id, url, caption, is_primary, display_order, room_type, created_at, updated_at
`

type UpdatePropertyImageParams struct {
	ID           uuid.UUID      `json:"id"`
	Url          string         `json:"url"`
	Caption      sql.NullString `json:"caption"`
	IsPrimary    sql.NullBool   `json:"is_primary"`
	DisplayOrder sql.NullInt32  `json:"display_order"`
	RoomType     sql.NullString `json:"room_type"`
}

func (q *Queries) UpdatePropertyImage(ctx context.Context, arg UpdatePropertyImageParams) (PropertyImage, error) {
	row := q.db.QueryRowContext(ctx, updatePropertyImage,
		arg.ID,
		arg.Url,
		arg.Caption,
		arg.IsPrimary,
		arg.DisplayOrder,
		arg.RoomType,
	)
	var i PropertyImage
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Url,
		&i.Caption,
		&i.IsPrimary,
		&i.DisplayOrder,
		&i.RoomType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
