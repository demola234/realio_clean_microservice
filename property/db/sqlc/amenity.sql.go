// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: amenity.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAmenity = `-- name: CreateAmenity :one
INSERT INTO "Amenity" (
  id,
  name,
  description,
  icon,
  category
) VALUES (
  gen_random_uuid(),
  $1, $2, $3, $4
)
RETURNING id, name, description, icon, category, created_at, updated_at
`

type CreateAmenityParams struct {
	Name        string          `json:"name"`
	Description sql.NullString  `json:"description"`
	Icon        sql.NullString  `json:"icon"`
	Category    AmenityCategory `json:"category"`
}

func (q *Queries) CreateAmenity(ctx context.Context, arg CreateAmenityParams) (Amenity, error) {
	row := q.db.QueryRowContext(ctx, createAmenity,
		arg.Name,
		arg.Description,
		arg.Icon,
		arg.Category,
	)
	var i Amenity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAmenity = `-- name: DeleteAmenity :exec
DELETE FROM "Amenity"
WHERE id = $1
`

func (q *Queries) DeleteAmenity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAmenity, id)
	return err
}

const getAmenityByID = `-- name: GetAmenityByID :one
SELECT id, name, description, icon, category, created_at, updated_at FROM "Amenity"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAmenityByID(ctx context.Context, id uuid.UUID) (Amenity, error) {
	row := q.db.QueryRowContext(ctx, getAmenityByID, id)
	var i Amenity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAmenities = `-- name: ListAmenities :many
SELECT id, name, description, icon, category, created_at, updated_at FROM "Amenity"
WHERE ($1::amenity_category IS NULL OR category = $1)
ORDER BY name
`

func (q *Queries) ListAmenities(ctx context.Context, dollar_1 AmenityCategory) ([]Amenity, error) {
	rows, err := q.db.QueryContext(ctx, listAmenities, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Amenity{}
	for rows.Next() {
		var i Amenity
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Icon,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAmenity = `-- name: UpdateAmenity :one
UPDATE "Amenity"
SET
  name = COALESCE($2, name),
  description = COALESCE($3, description),
  icon = COALESCE($4, icon),
  category = COALESCE($5, category),
  updated_at = now()
WHERE id = $1
RETURNING id, name, description, icon, category, created_at, updated_at
`

type UpdateAmenityParams struct {
	ID          uuid.UUID       `json:"id"`
	Name        string          `json:"name"`
	Description sql.NullString  `json:"description"`
	Icon        sql.NullString  `json:"icon"`
	Category    AmenityCategory `json:"category"`
}

func (q *Queries) UpdateAmenity(ctx context.Context, arg UpdateAmenityParams) (Amenity, error) {
	row := q.db.QueryRowContext(ctx, updateAmenity,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Icon,
		arg.Category,
	)
	var i Amenity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
