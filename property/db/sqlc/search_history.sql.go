// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: search_history.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const clearUserSearchHistory = `-- name: ClearUserSearchHistory :exec
DELETE FROM "SearchHistory"
WHERE user_id = $1
`

func (q *Queries) ClearUserSearchHistory(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearUserSearchHistory, userID)
	return err
}

const deleteSearchHistory = `-- name: DeleteSearchHistory :exec
DELETE FROM "SearchHistory"
WHERE id = $1 AND user_id = $2
`

type DeleteSearchHistoryParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteSearchHistory(ctx context.Context, arg DeleteSearchHistoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteSearchHistory, arg.ID, arg.UserID)
	return err
}

const getUserSearchHistory = `-- name: GetUserSearchHistory :many
SELECT id, user_id, search_query, filters, created_at FROM "SearchHistory"
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetUserSearchHistoryParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) GetUserSearchHistory(ctx context.Context, arg GetUserSearchHistoryParams) ([]SearchHistory, error) {
	rows, err := q.db.QueryContext(ctx, getUserSearchHistory, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchHistory{}
	for rows.Next() {
		var i SearchHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SearchQuery,
			&i.Filters,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveSearchHistory = `-- name: SaveSearchHistory :one
INSERT INTO "SearchHistory" (
  id,
  user_id,
  search_query,
  filters
) VALUES (
  gen_random_uuid(),
  $1, $2, $3
)
RETURNING id, user_id, search_query, filters, created_at
`

type SaveSearchHistoryParams struct {
	UserID      uuid.UUID             `json:"user_id"`
	SearchQuery string                `json:"search_query"`
	Filters     pqtype.NullRawMessage `json:"filters"`
}

func (q *Queries) SaveSearchHistory(ctx context.Context, arg SaveSearchHistoryParams) (SearchHistory, error) {
	row := q.db.QueryRowContext(ctx, saveSearchHistory, arg.UserID, arg.SearchQuery, arg.Filters)
	var i SearchHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SearchQuery,
		&i.Filters,
		&i.CreatedAt,
	)
	return i, err
}
